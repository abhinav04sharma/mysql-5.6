source include/have_log_bin.inc;
source include/have_rocksdb.inc;

disable_warnings;
DROP TABLE IF EXISTS t1;
enable_warnings;

connect (con1,localhost,root,,);
connect (con2,localhost,root,,);

connection con1;
let $master_uuid=`SELECT @@SERVER_UUID;`;
CREATE TABLE T1 (a INT) ENGINE=ROCKSDB;
INSERT INTO T1 VALUES(1);

echo "con1: Creating explict snapshot after one insert";
let $snapshot=
        query_get_value(CREATE EXPLICIT ROCKSDB SNAPSHOT, Snapshot_ID, 1);
echo "con1: T1 after creating snapshot";
SELECT * FROM T1;

connection con2;
echo "con2: Inserting another row in T1";
INSERT INTO T1 VALUES(2);
SELECT * FROM T1;
echo "con2: Attaching snapshot id $snapshot";
replace_result $master_uuid uuid;
eval ATTACH EXPLICIT ROCKSDB SNAPSHOT $snapshot;
echo "con2: T1 after attaching snapshot (2nd row should not be visible)";
SELECT * FROM T1;
echo "con2: Releasing snapshot";
replace_result $master_uuid uuid;
RELEASE EXPLICIT ROCKSDB SNAPSHOT;
echo "con2: T1 after releasing snapshot (two rows should be visible)";
SELECT * FROM T1;

connection con1;
echo "con1: T1 after 2nd insert (2nd row should not be visible)";
SELECT * FROM T1;
echo "con1: Releasing snapshot";
replace_result $master_uuid uuid;
RELEASE EXPLICIT ROCKSDB SNAPSHOT;
echo "con1: T1 after releasing snapshot (two rows should be visible)";
SELECT * FROM T1;

echo "con1: Clearing T1 and inserting one row";
DELETE FROM T1;
INSERT INTO T1 VALUES(1);

echo "con1: Starting shared snapshot";
replace_result $master_uuid uuid;
let $snapshot=
query_get_value(START TRANSACTION WITH SHARED ROCKSDB SNAPSHOT, Snapshot_ID, 1);
echo "con1: T1 inside shared snapshot";
SELECT * FROM T1;

connection con2;
echo "con2: Inserting another row";
INSERT INTO T1 VALUES(2);
SELECT * FROM T1;
echo "con2: Starting existing snapshot in con1";
replace_result $master_uuid uuid;
eval START TRANSACTION WITH EXISTING ROCKSDB SNAPSHOT $snapshot;
echo "con2: T1 using existing snapshot (should have one row)";
SELECT * FROM T1;
COMMIT;
echo "con2: T1 after commit (should have two rows)";
SELECT * FROM T1;

connection con1;
COMMIT;
echo "con1: T1 after commit (should have two rows)";
SELECT * FROM T1;

## Negative test cases
connection con1;
let $snapshot=
        query_get_value(CREATE EXPLICIT ROCKSDB SNAPSHOT, Snapshot_ID, 1);
error ER_UPDATES_WITH_EXPLICIT_SNAPSHOT;
INSERT INTO T1 VALUES(1);

connection con2;
replace_result $master_uuid uuid;
eval ATTACH EXPLICIT ROCKSDB SNAPSHOT $snapshot;
error ER_UPDATES_WITH_EXPLICIT_SNAPSHOT;
INSERT INTO T1 VALUES(1);

connection con1;
replace_result $master_uuid uuid;
RELEASE EXPLICIT ROCKSDB SNAPSHOT;
connection con2;
replace_result $master_uuid uuid;
RELEASE EXPLICIT ROCKSDB SNAPSHOT;

connection con1;
let $snapshot=
query_get_value(START TRANSACTION WITH SHARED ROCKSDB SNAPSHOT, Snapshot_ID, 1);
error ER_UPDATES_WITH_CONSISTENT_SNAPSHOT;
INSERT INTO T1 VALUES(1);

connection con2;
replace_result $master_uuid uuid;
eval START TRANSACTION WITH EXISTING ROCKSDB SNAPSHOT $snapshot;
error ER_UPDATES_WITH_CONSISTENT_SNAPSHOT;
INSERT INTO T1 VALUES(1);

connection con1;
COMMIT;
connection con2;
COMMIT;


DROP TABLE T1;

connection default;
disconnect con1;
disconnect con2;
